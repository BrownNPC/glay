// Code generated by wazero-emscripten-embind, DO NOT EDIT.
package internal

import (
	"context"

	"github.com/jerbob92/wazero-emscripten-embind"
)

func Clay(e embind.Engine, ctx context.Context) (embind.ClassBase, error) {
	res, err := e.CallPublicSymbol(ctx, "Clay")
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(embind.ClassBase), nil
}

func DebugModeEnabled(e embind.Engine, ctx context.Context, arg0 bool) error {
	_, err := e.CallPublicSymbol(ctx, "DebugModeEnabled", arg0)
	return err
}

func Dimensions(e embind.Engine, ctx context.Context) (embind.ClassBase, error) {
	res, err := e.CallPublicSymbol(ctx, "Dimensions")
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(embind.ClassBase), nil
}

func RenderCommandArray(e embind.Engine, ctx context.Context) (embind.ClassBase, error) {
	res, err := e.CallPublicSymbol(ctx, "RenderCommandArray")
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(embind.ClassBase), nil
}

func StringSlice(e embind.Engine, ctx context.Context) (embind.ClassBase, error) {
	res, err := e.CallPublicSymbol(ctx, "StringSlice")
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(embind.ClassBase), nil
}

func TextElementConfig(e embind.Engine, ctx context.Context) (embind.ClassBase, error) {
	res, err := e.CallPublicSymbol(ctx, "TextElementConfig")
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(embind.ClassBase), nil
}
